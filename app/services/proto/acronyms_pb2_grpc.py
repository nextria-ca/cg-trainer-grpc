# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

# import acronyms_pb2 as acronyms__pb2
from . import acronyms_pb2 as acronyms__pb2
GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in acronyms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AcronymServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/acronyms.AcronymService/create',
                request_serializer=acronyms__pb2.Acronym.SerializeToString,
                response_deserializer=acronyms__pb2.Acronym.FromString,
                _registered_method=True)
        self.get_all = channel.unary_unary(
                '/acronyms.AcronymService/get_all',
                request_serializer=acronyms__pb2.Empty.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymList.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/acronyms.AcronymService/update',
                request_serializer=acronyms__pb2.Acronym.SerializeToString,
                response_deserializer=acronyms__pb2.Acronym.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/acronyms.AcronymService/delete',
                request_serializer=acronyms__pb2.Acronym.SerializeToString,
                response_deserializer=acronyms__pb2.Empty.FromString,
                _registered_method=True)
        self.get_by_id = channel.unary_unary(
                '/acronyms.AcronymService/get_by_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.Acronym.FromString,
                _registered_method=True)
        self.add_to_trainset = channel.unary_unary(
                '/acronyms.AcronymService/add_to_trainset',
                request_serializer=acronyms__pb2.AcronymWithTrainsetId.SerializeToString,
                response_deserializer=acronyms__pb2.Acronym.FromString,
                _registered_method=True)
        self.get_by_trainset_id = channel.unary_unary(
                '/acronyms.AcronymService/get_by_trainset_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymList.FromString,
                _registered_method=True)


class AcronymServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_to_trainset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_trainset_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AcronymServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=acronyms__pb2.Acronym.FromString,
                    response_serializer=acronyms__pb2.Acronym.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=acronyms__pb2.Empty.FromString,
                    response_serializer=acronyms__pb2.AcronymList.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=acronyms__pb2.Acronym.FromString,
                    response_serializer=acronyms__pb2.Acronym.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=acronyms__pb2.Acronym.FromString,
                    response_serializer=acronyms__pb2.Empty.SerializeToString,
            ),
            'get_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.Acronym.SerializeToString,
            ),
            'add_to_trainset': grpc.unary_unary_rpc_method_handler(
                    servicer.add_to_trainset,
                    request_deserializer=acronyms__pb2.AcronymWithTrainsetId.FromString,
                    response_serializer=acronyms__pb2.Acronym.SerializeToString,
            ),
            'get_by_trainset_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_trainset_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.AcronymList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acronyms.AcronymService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('acronyms.AcronymService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AcronymService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/create',
            acronyms__pb2.Acronym.SerializeToString,
            acronyms__pb2.Acronym.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/get_all',
            acronyms__pb2.Empty.SerializeToString,
            acronyms__pb2.AcronymList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/update',
            acronyms__pb2.Acronym.SerializeToString,
            acronyms__pb2.Acronym.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/delete',
            acronyms__pb2.Acronym.SerializeToString,
            acronyms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/get_by_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.Acronym.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def add_to_trainset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/add_to_trainset',
            acronyms__pb2.AcronymWithTrainsetId.SerializeToString,
            acronyms__pb2.Acronym.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_trainset_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymService/get_by_trainset_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.AcronymList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AcronymTrainDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/acronyms.AcronymTrainDataService/create',
                request_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                _registered_method=True)
        self.get_all = channel.unary_unary(
                '/acronyms.AcronymTrainDataService/get_all',
                request_serializer=acronyms__pb2.Empty.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymTrainDataList.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/acronyms.AcronymTrainDataService/update',
                request_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/acronyms.AcronymTrainDataService/delete',
                request_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
                response_deserializer=acronyms__pb2.Empty.FromString,
                _registered_method=True)
        self.get_by_id = channel.unary_unary(
                '/acronyms.AcronymTrainDataService/get_by_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                _registered_method=True)


class AcronymTrainDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AcronymTrainDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                    response_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=acronyms__pb2.Empty.FromString,
                    response_serializer=acronyms__pb2.AcronymTrainDataList.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                    response_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=acronyms__pb2.AcronymTrainData.FromString,
                    response_serializer=acronyms__pb2.Empty.SerializeToString,
            ),
            'get_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.AcronymTrainData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acronyms.AcronymTrainDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('acronyms.AcronymTrainDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AcronymTrainDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymTrainDataService/create',
            acronyms__pb2.AcronymTrainData.SerializeToString,
            acronyms__pb2.AcronymTrainData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymTrainDataService/get_all',
            acronyms__pb2.Empty.SerializeToString,
            acronyms__pb2.AcronymTrainDataList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymTrainDataService/update',
            acronyms__pb2.AcronymTrainData.SerializeToString,
            acronyms__pb2.AcronymTrainData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymTrainDataService/delete',
            acronyms__pb2.AcronymTrainData.SerializeToString,
            acronyms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.AcronymTrainDataService/get_by_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.AcronymTrainData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TrainsetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/acronyms.TrainsetService/create',
                request_serializer=acronyms__pb2.Trainset.SerializeToString,
                response_deserializer=acronyms__pb2.Trainset.FromString,
                _registered_method=True)
        self.get_all = channel.unary_unary(
                '/acronyms.TrainsetService/get_all',
                request_serializer=acronyms__pb2.Empty.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetList.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/acronyms.TrainsetService/update',
                request_serializer=acronyms__pb2.Trainset.SerializeToString,
                response_deserializer=acronyms__pb2.Trainset.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/acronyms.TrainsetService/delete',
                request_serializer=acronyms__pb2.Trainset.SerializeToString,
                response_deserializer=acronyms__pb2.Empty.FromString,
                _registered_method=True)
        self.get_by_id = channel.unary_unary(
                '/acronyms.TrainsetService/get_by_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.Trainset.FromString,
                _registered_method=True)
        self.save_checkpoint = channel.unary_unary(
                '/acronyms.TrainsetService/save_checkpoint',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.Trainset.FromString,
                _registered_method=True)
        self.set_active = channel.unary_unary(
                '/acronyms.TrainsetService/set_active',
                request_serializer=acronyms__pb2.TrainsetIdWithModelId.SerializeToString,
                response_deserializer=acronyms__pb2.Trainset.FromString,
                _registered_method=True)
        self.get_by_base_model_id = channel.unary_unary(
                '/acronyms.TrainsetService/get_by_base_model_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetList.FromString,
                _registered_method=True)


class TrainsetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save_checkpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_active(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_base_model_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainsetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=acronyms__pb2.Trainset.FromString,
                    response_serializer=acronyms__pb2.Trainset.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=acronyms__pb2.Empty.FromString,
                    response_serializer=acronyms__pb2.TrainsetList.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=acronyms__pb2.Trainset.FromString,
                    response_serializer=acronyms__pb2.Trainset.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=acronyms__pb2.Trainset.FromString,
                    response_serializer=acronyms__pb2.Empty.SerializeToString,
            ),
            'get_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.Trainset.SerializeToString,
            ),
            'save_checkpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.save_checkpoint,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.Trainset.SerializeToString,
            ),
            'set_active': grpc.unary_unary_rpc_method_handler(
                    servicer.set_active,
                    request_deserializer=acronyms__pb2.TrainsetIdWithModelId.FromString,
                    response_serializer=acronyms__pb2.Trainset.SerializeToString,
            ),
            'get_by_base_model_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_base_model_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.TrainsetList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acronyms.TrainsetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('acronyms.TrainsetService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrainsetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/create',
            acronyms__pb2.Trainset.SerializeToString,
            acronyms__pb2.Trainset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/get_all',
            acronyms__pb2.Empty.SerializeToString,
            acronyms__pb2.TrainsetList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/update',
            acronyms__pb2.Trainset.SerializeToString,
            acronyms__pb2.Trainset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/delete',
            acronyms__pb2.Trainset.SerializeToString,
            acronyms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/get_by_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.Trainset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def save_checkpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/save_checkpoint',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.Trainset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def set_active(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/set_active',
            acronyms__pb2.TrainsetIdWithModelId.SerializeToString,
            acronyms__pb2.Trainset.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_base_model_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetService/get_by_base_model_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.TrainsetList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TrainsetContentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/acronyms.TrainsetContentService/create',
                request_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetContent.FromString,
                _registered_method=True)
        self.get_all = channel.unary_unary(
                '/acronyms.TrainsetContentService/get_all',
                request_serializer=acronyms__pb2.Empty.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetContentList.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/acronyms.TrainsetContentService/update',
                request_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetContent.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/acronyms.TrainsetContentService/delete',
                request_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
                response_deserializer=acronyms__pb2.Empty.FromString,
                _registered_method=True)
        self.get_by_id = channel.unary_unary(
                '/acronyms.TrainsetContentService/get_by_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.TrainsetContent.FromString,
                _registered_method=True)


class TrainsetContentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainsetContentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=acronyms__pb2.TrainsetContent.FromString,
                    response_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=acronyms__pb2.Empty.FromString,
                    response_serializer=acronyms__pb2.TrainsetContentList.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=acronyms__pb2.TrainsetContent.FromString,
                    response_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=acronyms__pb2.TrainsetContent.FromString,
                    response_serializer=acronyms__pb2.Empty.SerializeToString,
            ),
            'get_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.TrainsetContent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acronyms.TrainsetContentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('acronyms.TrainsetContentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrainsetContentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetContentService/create',
            acronyms__pb2.TrainsetContent.SerializeToString,
            acronyms__pb2.TrainsetContent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetContentService/get_all',
            acronyms__pb2.Empty.SerializeToString,
            acronyms__pb2.TrainsetContentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetContentService/update',
            acronyms__pb2.TrainsetContent.SerializeToString,
            acronyms__pb2.TrainsetContent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetContentService/delete',
            acronyms__pb2.TrainsetContent.SerializeToString,
            acronyms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.TrainsetContentService/get_by_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.TrainsetContent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create = channel.unary_unary(
                '/acronyms.ModelService/create',
                request_serializer=acronyms__pb2.Model.SerializeToString,
                response_deserializer=acronyms__pb2.Model.FromString,
                _registered_method=True)
        self.get_all = channel.unary_unary(
                '/acronyms.ModelService/get_all',
                request_serializer=acronyms__pb2.Empty.SerializeToString,
                response_deserializer=acronyms__pb2.ModelList.FromString,
                _registered_method=True)
        self.update = channel.unary_unary(
                '/acronyms.ModelService/update',
                request_serializer=acronyms__pb2.Model.SerializeToString,
                response_deserializer=acronyms__pb2.Model.FromString,
                _registered_method=True)
        self.delete = channel.unary_unary(
                '/acronyms.ModelService/delete',
                request_serializer=acronyms__pb2.Model.SerializeToString,
                response_deserializer=acronyms__pb2.Empty.FromString,
                _registered_method=True)
        self.get_by_id = channel.unary_unary(
                '/acronyms.ModelService/get_by_id',
                request_serializer=acronyms__pb2.IdRequest.SerializeToString,
                response_deserializer=acronyms__pb2.Model.FromString,
                _registered_method=True)


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=acronyms__pb2.Model.FromString,
                    response_serializer=acronyms__pb2.Model.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=acronyms__pb2.Empty.FromString,
                    response_serializer=acronyms__pb2.ModelList.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=acronyms__pb2.Model.FromString,
                    response_serializer=acronyms__pb2.Model.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=acronyms__pb2.Model.FromString,
                    response_serializer=acronyms__pb2.Empty.SerializeToString,
            ),
            'get_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_by_id,
                    request_deserializer=acronyms__pb2.IdRequest.FromString,
                    response_serializer=acronyms__pb2.Model.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'acronyms.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('acronyms.ModelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.ModelService/create',
            acronyms__pb2.Model.SerializeToString,
            acronyms__pb2.Model.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.ModelService/get_all',
            acronyms__pb2.Empty.SerializeToString,
            acronyms__pb2.ModelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.ModelService/update',
            acronyms__pb2.Model.SerializeToString,
            acronyms__pb2.Model.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.ModelService/delete',
            acronyms__pb2.Model.SerializeToString,
            acronyms__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/acronyms.ModelService/get_by_id',
            acronyms__pb2.IdRequest.SerializeToString,
            acronyms__pb2.Model.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
